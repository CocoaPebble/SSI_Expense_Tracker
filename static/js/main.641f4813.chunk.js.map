{"version":3,"sources":["components/Dashboard.jsx","slicers/transactionSlicer.js","components/HistoryItem.jsx","components/EditCard.jsx","components/History.jsx","components/AddTransaction.jsx","App.js","serviceWorker.js","store.js","index.js"],"names":["Dashboard","allTransactions","useSelector","state","transactions","useMemo","total","income","expense","forEach","element","amount","totalAmount","className","style","display","data-testid","fontSize","Paper","elevation","borderRight","color","transactionSlice","createSlice","name","initialState","id","text","reducers","setAllTransaction","action","payload","addTransaction","deleteTransaction","filter","e","editTransaction","map","actions","HistoryItem","data","setDisplayEditCard","setEditCardInitState","dispatch","useDispatch","square","icon","faTrashAlt","onClick","window","confirm","faEdit","EditCard","initState","useForm","register","handleSubmit","errors","target","onSubmit","TextField","label","type","inputRef","required","maxLength","defaultValue","pattern","Button","variant","History","useState","showIncome","setShowIncome","showExpense","setShowExpense","sortState","setSortState","displayEditCard","editCardInitState","displayHistoryList","filterTransactions","sort","a","b","Checkbox","size","checked","onChange","faSort","title","key","App","useCallback","event","uuidV4","value","error","helperText","React","memo","Boolean","location","hostname","match","configureStore","reducer","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.641f4813.chunk.js","sourcesContent":["import React, { useMemo } from 'react';\nimport { useSelector } from 'react-redux';\nimport { Paper } from '@material-ui/core';\nimport '../css/dashboard.css';\n\nexport default function Dashboard() {\n    const { allTransactions } = useSelector((state) => state.transactions);\n\n    const [totalAmount, income, expense] = useMemo(() => {\n        let total = 0,\n            income = 0,\n            expense = 0;\n\n        allTransactions.forEach((element) => {\n            total += element.amount;\n            if (element.amount >= 0) {\n                income += element.amount;\n            } else {\n                expense += element.amount;\n            }\n        });\n        return [total, income, expense];\n    }, [allTransactions]);\n\n    return (\n        <div className=\"dashboardContainer\">\n            <h1> Expense Tracker</h1>\n            <div>\n                <h2 style={{ display: 'inline' }}>Balance: </h2>\n                <span data-testid=\"jestTest\" style={{ fontSize: '25px' }}>\n                    ${totalAmount}\n                </span>\n            </div>\n            <Paper elevation={3} className=\"paper\">\n                <div\n                    className=\"paperItem\"\n                    style={{\n                        borderRight: '1px #ddd solid',\n                    }}\n                >\n                    <h3>INCOME</h3>\n                    <div style={{ color: 'green' }}>${income}</div>\n                </div>\n                <div className=\"paperItem\">\n                    <h3>EXPENSE</h3>\n                    <div style={{ color: 'red' }}>${expense}</div>\n                </div>\n            </Paper>\n        </div>\n    );\n}\n","import { createSlice } from '@reduxjs/toolkit';\n\nexport const transactionSlice = createSlice({\n    name: 'transactions',\n    initialState: {\n        allTransactions: [\n            {\n                id: 1,\n                amount: 100,\n                text: 'test1',\n            },\n\n            {\n                id: 2,\n                amount: 200,\n                text: 'test2',\n            },\n\n            {\n                id: 3,\n                amount: -300,\n                text: 'test3',\n            },\n        ],\n    },\n\n    reducers: {\n        setAllTransaction: (state, action) => {\n            return { ...state, allTransactions: action.payload };\n        },\n\n        addTransaction: (state, action) => {\n            return {\n                ...state,\n                allTransactions: [...state.allTransactions, action.payload],\n            };\n        },\n\n        deleteTransaction: (state, action) => {\n            return {\n                ...state,\n                allTransactions: state.allTransactions.filter(\n                    (e) => e.id !== action.payload\n                ),\n            };\n        },\n\n        editTransaction: (state, action) => {\n            return {\n                ...state,\n                allTransactions: state.allTransactions.map((e) => {\n                    if (e.id === action.payload.id) {\n                        return {\n                            id: action.payload.id,\n                            text: action.payload.text,\n                            amount: action.payload.amount,\n                        };\n                    }\n                    return e;\n                }),\n            };\n        },\n    },\n});\n\nexport const {\n    setAllTransaction,\n    addTransaction,\n    deleteTransaction,\n    editTransaction,\n} = transactionSlice.actions;\n\nexport default transactionSlice.reducer;\n","import React from 'react';\nimport { Paper } from '@material-ui/core';\nimport { useDispatch } from 'react-redux';\nimport { deleteTransaction } from '../slicers/transactionSlicer';\nimport '../css/historyItem.css';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTrashAlt, faEdit } from '@fortawesome/free-solid-svg-icons';\n\nexport default function HistoryItem({\n    data,\n    setDisplayEditCard,\n    setEditCardInitState,\n}) {\n    const dispatch = useDispatch();\n\n    const handleDelete = (id) => {\n        if (window.confirm('delete?')) {\n            dispatch(deleteTransaction(id));\n        }\n    };\n\n    return (\n        <>\n            <li>\n                <div className=\"historyItemContainer\">\n                    <Paper\n                        className=\"historyItem\"\n                        style={{\n                            borderRight:\n                                data.amount < 0\n                                    ? '3px #f00 solid'\n                                    : '3px #0f0 solid',\n                        }}\n                        square\n                    >\n                        <div>{data.text}</div>\n                        <div>{data.amount}</div>\n                    </Paper>\n                    <FontAwesomeIcon\n                        icon={faTrashAlt}\n                        className=\"delBtn\"\n                        onClick={() => handleDelete(data.id)}\n                    />\n                    <FontAwesomeIcon\n                        icon={faEdit}\n                        className=\"editBtn\"\n                        onClick={() => {\n                            setDisplayEditCard(true);\n                            setEditCardInitState({\n                                id: data.id,\n                                text: data.text,\n                                amount: data.amount,\n                            });\n                        }}\n                    />\n                </div>\n            </li>\n        </>\n    );\n}\n","import React from 'react';\nimport { Paper, TextField, Button } from '@material-ui/core';\nimport { useForm } from 'react-hook-form';\nimport { useDispatch } from 'react-redux';\nimport { editTransaction } from '../slicers/transactionSlicer';\nimport '../css/editCard.css';\n\nexport default function EditCard({ setDisplayEditCard, initState }) {\n    const { register, handleSubmit, errors } = useForm();\n    const dispatch = useDispatch();\n\n    const submitEditForm = (data) => {\n        dispatch(\n            editTransaction({\n                id: initState.id,\n                text: data.text,\n                amount: +data.amount,\n            })\n        );\n        setDisplayEditCard(false);\n    };\n\n    return (\n        <div\n            className=\"editCardContainer\"\n            onClick={(e) => {\n                if (e.target.className === 'editCardContainer')\n                    setDisplayEditCard(false);\n            }}\n        >\n            <Paper className=\"formContainer\">\n                <form\n                    className=\"editCardForm\"\n                    onSubmit={handleSubmit(submitEditForm)}\n                >\n                    <span onClick={() => setDisplayEditCard(false)}>\n                        &times;\n                    </span>\n                    <TextField\n                        label=\"Text:\"\n                        type=\"text\"\n                        name=\"text\"\n                        inputRef={register({\n                            required: true,\n                            maxLength: 80,\n                        })}\n                        defaultValue={initState.text}\n                    />\n\n                    <TextField\n                        label=\"Amount\"\n                        type=\"text\"\n                        name=\"amount\"\n                        inputRef={register({\n                            required: true,\n                            maxLength: 100,\n                            pattern: /^[+-]?([0-9]+([.][0-9]{1,2})?|[.][0-9]{1,2})$/i,\n                        })}\n                        defaultValue={initState.amount}\n                    />\n                    <p style={{ color: 'red' }}>\n                        {!!errors.amount || !!errors.text ? 'Error' : ''}\n                    </p>\n                    <Button type=\"submit\" variant=\"contained\" color=\"primary\">\n                        Change\n                    </Button>\n                </form>\n            </Paper>\n        </div>\n    );\n}\n","import React, { useState, useMemo } from 'react';\nimport { useSelector } from 'react-redux';\nimport { Checkbox } from '@material-ui/core';\nimport HistoryItem from './HistoryItem';\nimport EditCard from './EditCard';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSort } from '@fortawesome/free-solid-svg-icons';\n\nimport '../css/history.css';\n\nexport default function History() {\n    const [showIncome, setShowIncome] = useState(true);\n    const [showExpense, setShowExpense] = useState(true);\n    const [sortState, setSortState] = useState(0);\n\n    const [displayEditCard, setDisplayEditCard] = useState(false);\n    const [editCardInitState, setEditCardInitState] = useState({\n        id: null,\n        text: null,\n        amount: null,\n    });\n\n    const { allTransactions } = useSelector((state) => state.transactions);\n\n    const changeSortState = () => {\n        setSortState((sortState + 1) % 3);\n    };\n\n    const displayHistoryList = useMemo(() => {\n        const filterTransactions = allTransactions.filter((e) => {\n            if (e.amount >= 0 && showIncome) return true;\n            if (e.amount < 0 && showExpense) return true;\n            return false;\n        });\n\n        switch (sortState) {\n            case 0:\n                return filterTransactions;\n            case 1:\n                return filterTransactions.sort((a, b) => b.amount - a.amount);\n            case 2:\n                return filterTransactions.sort((a, b) => a.amount - b.amount);\n            default:\n                return filterTransactions;\n        }\n    }, [showIncome, showExpense, sortState, allTransactions]);\n\n    return (\n        <div>\n            <h2 className=\"h2\">History</h2>\n            <div className=\"funcBar\">\n                <div>\n                    <Checkbox\n                        color=\"primary\"\n                        size=\"small\"\n                        checked={showIncome}\n                        onChange={() => setShowIncome(!showIncome)}\n                    />\n                    <span>Show Income</span>\n                </div>\n\n                <div>\n                    <Checkbox\n                        color=\"primary\"\n                        size=\"small\"\n                        checked={showExpense}\n                        onChange={() => setShowExpense(!showExpense)}\n                    />\n                    <span>Show Expense</span>\n                </div>\n\n                <FontAwesomeIcon\n                    icon={faSort}\n                    className=\"sortBtn\"\n                    onClick={changeSortState}\n                    title=\"sort\"\n                />\n                {sortState === 0 && <span>&minus;</span>}\n                {sortState === 1 && <span>&uarr;</span>}\n                {sortState === 2 && <span>&darr;</span>}\n            </div>\n            <ul>\n                {displayHistoryList.map((e) => (\n                    <HistoryItem\n                        key={e.id}\n                        data={e}\n                        setDisplayEditCard={setDisplayEditCard}\n                        setEditCardInitState={setEditCardInitState}\n                    />\n                ))}\n            </ul>\n\n            {displayEditCard && (\n                <EditCard\n                    setDisplayEditCard={setDisplayEditCard}\n                    initState={editCardInitState}\n                />\n            )}\n        </div>\n    );\n}\n","import React, { useCallback } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { addTransaction } from '../slicers/transactionSlicer';\nimport { useForm } from 'react-hook-form';\nimport { TextField, Button } from '@material-ui/core';\nimport { v4 as uuidV4 } from 'uuid';\nimport '../css/addTransaction.css';\n\nexport default function App() {\n    const dispatch = useDispatch();\n\n    const { register, handleSubmit, errors } = useForm();\n\n    const onSubmit = useCallback(\n        (data, event) => {\n            data.amount = +data.amount;\n            data.id = uuidV4();\n            dispatch(addTransaction(data));\n            // clean form\n            event.target[0].value = '';\n            event.target[1].value = '';\n        },\n        [dispatch]\n    );\n\n    return (\n        <div className=\"addTransactionContainer\">\n            <h2 className=\"h2\"> Add New Transaction</h2>\n            <form onSubmit={handleSubmit(onSubmit)}>\n                <TextField\n                    className=\"addTransactionTextField\"\n                    id=\"description\"\n                    label=\"Text\"\n                    type=\"text\"\n                    name=\"text\"\n                    inputRef={register({\n                        required: true,\n                        maxLength: 80,\n                    })}\n                    error={!!errors.text}\n                    helperText={!!errors.text && 'Invalid'}\n                />\n\n                <TextField\n                    className=\"addTransactionTextField\"\n                    id=\"amount\"\n                    label=\"Amount\"\n                    type=\"text\"\n                    name=\"amount\"\n                    inputRef={register({\n                        required: true,\n                        maxLength: 100,\n                        pattern: /^[+-]?([0-9]+([.][0-9]{1,2})?|[.][0-9]{1,2})$/i,\n                    })}\n                    error={!!errors.amount}\n                    helperText={!!errors.amount && 'Invalid'}\n                />\n                <div className=\"submitContainer\">\n                    <Button\n                        className=\"btn-submit\"\n                        type=\"submit\"\n                        variant=\"contained\"\n                        color=\"primary\"\n                    >\n                        Add\n                    </Button>\n                </div>\n            </form>\n        </div>\n    );\n}\n","import React from 'react';\nimport './App.css';\n\nimport Dashboard from './components/Dashboard';\nimport History from './components/History';\nimport AddTransaction from './components/AddTransaction';\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <div className=\"transactionApp\">\n                <Dashboard />\n                <History />\n                <AddTransaction />\n            </div>\n        </div>\n    );\n}\n\nexport default React.memo(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { configureStore } from '@reduxjs/toolkit';\nimport transactions from './slicers/transactionSlicer';\n\nexport default configureStore({\n    reducer: { transactions },\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}