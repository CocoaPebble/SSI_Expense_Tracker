{"version":3,"sources":["components/Dashboard.jsx","components/History.jsx","slicers/transactionSlicer.js","components/AddTransaction.jsx","App.js","serviceWorker.js","store.js","index.js"],"names":["Dashboard","allTransactions","useSelector","state","transactions","useMemo","total","income","expense","forEach","element","amount","totalAmount","className","style","display","padding","Paper","flexBasis","History","map","t","key","id","text","transactionSlice","createSlice","name","initialState","reducers","setAllTransaction","action","payload","addTransaction","actions","App","dispatch","useDispatch","useForm","register","handleSubmit","errors","onSubmit","data","event","Math","random","console","log","target","value","TextField","label","type","inputRef","required","maxLength","error","helperText","pattern","Button","variant","color","Boolean","window","location","hostname","match","configureStore","reducer","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.15f70f89.chunk.js","sourcesContent":["import React, { useMemo } from 'react';\nimport { useSelector } from 'react-redux';\nimport { Paper } from '@material-ui/core';\nimport '../css/dashboard.css';\n\nexport default function Dashboard() {\n    const { allTransactions } = useSelector((state) => state.transactions);\n\n    const [totalAmount, income, expense] = useMemo(() => {\n        let total = 0,\n            income = 0,\n            expense = 0;\n\n        allTransactions.forEach((element) => {\n            total += element.amount;\n            if (element.amount >= 0) {\n                income += element.amount;\n            } else {\n                expense += element.amount;\n            }\n        });\n        return [total, income, expense];\n    }, [allTransactions]);\n\n    return (\n        <div className=\"dashboardContainer\">\n            <h1> Expense Tracker</h1>\n            <div>\n                <h2>Balance :</h2>\n                <div>{totalAmount}</div>\n            </div>\n            <div style={{ display: 'flex', padding: '10px' }}>\n                <Paper style={{ flexBasis: '50%' }}>\n                    <h3>Income :</h3>\n                    <div>{income}</div>\n                </Paper>\n                <Paper style={{ flexBasis: '50%' }}>\n                    <h3>Expanse :</h3>\n\n                    <div>{expense}</div>\n                </Paper>\n            </div>\n        </div>\n    );\n}\n","import React from 'react';\nimport { useSelector } from 'react-redux';\n\nexport default function History() {\n    const { allTransactions } = useSelector((state) => state.transactions);\n    return (\n        <div>\n            <ul>\n                {allTransactions.map((t) => {\n                    return (\n                        <li key={t.id}>\n                            text: {t.text} --- amount: {t.amount}\n                        </li>\n                    );\n                })}\n            </ul>\n        </div>\n    );\n}\n","import { createSlice } from '@reduxjs/toolkit';\n\nexport const transactionSlice = createSlice({\n    name: 'transactions',\n    initialState: {\n        allTransactions: [\n            {\n                id: 1,\n                amount: 100,\n                text: 'test1',\n            },\n\n            {\n                id: 2,\n                amount: 200,\n                text: 'test2',\n            },\n\n            {\n                id: 3,\n                amount: -300,\n                text: 'test3',\n            },\n        ],\n    },\n\n    reducers: {\n        setAllTransaction: (state, action) => {\n            return { ...state, allTransactions: action.payload };\n        },\n\n        addTransaction: (state, action) => {\n            return {\n                ...state,\n                allTransactions: [...state.allTransactions, action.payload],\n            };\n        },\n    },\n});\n\nexport const { setAllTransaction, addTransaction } = transactionSlice.actions;\n\nexport default transactionSlice.reducer;\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { addTransaction } from '../slicers/transactionSlicer';\nimport { useForm } from 'react-hook-form';\nimport { TextField, Button } from '@material-ui/core';\nimport '../css/addTransaction.css';\n\nexport default function App() {\n    const dispatch = useDispatch();\n\n    const { register, handleSubmit, errors } = useForm();\n    const onSubmit = (data, event) => {\n        data.amount = +data.amount;\n        data.id = Math.random();\n        dispatch(addTransaction(data));\n        console.log(data);\n        // clean form\n        event.target[0].value = '';\n        event.target[1].value = '';\n    };\n\n    return (\n        <div className=\"addTransactionContainer\">\n            <h2 className=\"h2\"> Add New Transaction</h2>\n            <form onSubmit={handleSubmit(onSubmit)}>\n                <TextField\n                    className=\"textfield\"\n                    id=\"description\"\n                    label=\"Text\"\n                    type=\"text\"\n                    name=\"text\"\n                    inputRef={register({\n                        required: true,\n                        maxLength: 80,\n                    })}\n                    error={!!errors.text}\n                    helperText={!!errors.text && 'Invalid'}\n                />\n\n                <TextField\n                    className=\"textfield\"\n                    id=\"amount\"\n                    label=\"Amount\"\n                    type=\"text\"\n                    name=\"amount\"\n                    inputRef={register({\n                        required: true,\n                        maxLength: 100,\n                        pattern: /^[+-]?([0-9]+([.][0-9]{1,2})?|[.][0-9]{1,2})$/i,\n                    })}\n                    error={!!errors.amount}\n                    helperText={!!errors.amount && 'Invalid'}\n                />\n                <div className=\"submitContainer\">\n                    <Button\n                        className=\"btn-submit\"\n                        type=\"submit\"\n                        variant=\"contained\"\n                        color=\"primary\"\n                    >\n                        Add\n                    </Button>\n                </div>\n            </form>\n        </div>\n    );\n}\n","import React from 'react';\nimport './App.css';\n\nimport Dashboard from './components/Dashboard';\nimport History from './components/History';\nimport AddTransaction from './components/AddTransaction';\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <div className=\"transactionApp\">\n                <Dashboard />\n                <History />\n                <AddTransaction />\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { configureStore } from '@reduxjs/toolkit';\nimport transactions from './slicers/transactionSlicer';\n\nexport default configureStore({\n    reducer: { transactions },\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}